import { useEffect, useState, useRef } from "react";
import { useNavigate } from "react-router-dom";
import { FaMicrophone, FaMicrophoneSlash } from "react-icons/fa";

const VoiceAssistant = () => {
  const [isActive, setIsActive] = useState(false);
  const recognitionRef = useRef(null);
  const navigate = useNavigate();
  const lastCommandRef = useRef("");

  const speak = (message) => {
    const synth = window.speechSynthesis;
    const utterance = new SpeechSynthesisUtterance(message);
    utterance.lang = "ru-RU";
    synth.speak(utterance);
  };

  const translateText = async (text, to = "en") => {
    try {
      const res = await fetch(`https://translate.googleapis.com/translate_a/single?client=gtx&sl=auto&tl=${to}&dt=t&q=${encodeURIComponent(text)}`);
      const data = await res.json();
      const translated = data[0][0][0];
      speak(`–ü–µ—Ä–µ–≤–æ–¥: ${translated}`);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞:", err);
      speak("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥");
    }
  };

  const handleWeather = () => {
    fetch("https://api.open-meteo.com/v1/forecast?latitude=38.56&longitude=68.78&current_weather=true")
      .then(res => res.json())
      .then(data => {
        const temp = data.current_weather.temperature;
        const wind = data.current_weather.windspeed;
        speak(`–í –î—É—à–∞–Ω–±–µ —Å–µ–π—á–∞—Å ${temp} –≥—Ä–∞–¥—É—Å–æ–≤ –∏ –≤–µ—Ç–µ—Ä ${wind} –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤ –≤ —á–∞—Å`);
      })
      .catch(() => speak("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ"));
  };

  const handleDate = () => {
    const date = new Date();
    const days = ["–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞"];
    const dayName = days[date.getDay()];
    const day = date.getDate();
    const month = date.toLocaleString("ru-RU", { month: "long" });
    const year = date.getFullYear();
    speak(`–°–µ–≥–æ–¥–Ω—è ${dayName}, ${day} ${month} ${year} –≥–æ–¥–∞`);
  };

  const handleLocalCommands = (transcript) => {
    const lower = transcript.toLowerCase();

    if (lower.includes("–ø–µ—Ä–µ–≤–µ–¥–∏")) {
      const match = lower.match(/–ø–µ—Ä–µ–≤–µ–¥–∏ (.+?) –Ω–∞ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π|—Ä—É—Å—Å–∫–∏–π|—Ç–∞–¥–∂–∏–∫—Å–∫–∏–π)/);
      if (match) {
        const phrase = match[1];
        const lang = match[2];
        const langMap = { –∞–Ω–≥–ª–∏–π—Å–∫–∏–π: "en", —Ä—É—Å—Å–∫–∏–π: "ru", —Ç–∞–¥–∂–∏–∫—Å–∫–∏–π: "tg" };
        const targetLang = langMap[lang];
        translateText(phrase, targetLang);
      } else {
        speak("–°–∫–∞–∂–∏: –ø–µ—Ä–µ–≤–µ–¥–∏ —Ñ—Ä–∞–∑—É –Ω–∞ –Ω—É–∂–Ω—ã–π —è–∑—ã–∫.");
      }
      return true;
    }

    if (lower.includes("–∫–∞–∫–æ–π —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å")) {
      handleDate();
      return true;
    }

    if (lower.includes("–ø–æ–≥–æ–¥–∞") && lower.includes("–¥—É—à–∞–Ω–±–µ")) {
      handleWeather();
      return true;
    }

    const commands = [
      { keyword: "–±–∏–±–ª–∏–æ—Ç–µ–∫", action: () => navigate("/library"), response: "–ü–µ—Ä–µ—Ö–æ–¥ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω" },
      { keyword: "–≥–ª–∞–≤–Ω", action: () => navigate("/"), response: "–í–æ—Ç –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞" },
      { keyword: "–ø–æ–∏—Å–∫", action: () => navigate("/searchpage"), response: "–û—Ç–∫—Ä—ã—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–∏—Å–∫–∞" },
      { keyword: "–ø—Ä–∏–≤–µ—Ç", response: "–ü—Ä–∏–≤–µ—Ç –±–æ—Å—Å, –∫–∞–∫ –≤–∞—à–∏ –¥–µ–ª–∞?" },
      { keyword: "—Å–∞–ª–∞–º –∞–ª–µ–π–∫—É–º", response: "–í–æ–∞–ª–µ–π–∫—É–º —Å–∞–ª–æ–º, —á–∏—Ö–µ–ª —à—É–º–æ? —Å–æ–∑? —Ö—É–±? –±–∞ —à—É–º–æ —á–∏ –∫—É–º–∞–∫ —Ä–∞—Å–æ–Ω–∞–º —Å–∞—Ä–¥–æ—Ä?" },
      { keyword: "–¥–µ–∫–∞–Ω —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞", response: "–î–µ–∫–∞–Ω —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –¶–∏—Ñ—Ä–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —Å–∏—Å—Ç–µ–º—ã –∏ –∑–∞—â–∏—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ê–±–¥—É—Ä–∞—Å—É–ª–æ–≤ –î–∞–ª–µ—Ä –ê–Ω–≤–∞—Ä–æ–≤–∏—á" },
      { keyword: "—Ä–µ–∫—Ç–æ—Ä —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞", response: "–†–µ–∫—Ç–æ—Ä–æ–º –¢–¢–£ –∏–º–µ–Ω–∏ –∞–∫–∞–¥–µ–º–∏–∫–∞ –ú. –û—Å–∏–º–∏ —è–≤–ª—è–µ—Ç—Å—è –î–∞–≤–ª–∞—Ç–∑–æ–¥–∞ –ö—É–¥—Ä–∞—Ç –ö–∞–º–±–∞—Ä" },
      { keyword: "–∑–∞–≤–µ–¥—É—é—â–∏–π –∫–∞—Ñ–µ–¥—Ä—ã", response: "–ó–∞–≤–µ–¥—É—é—â–∏–π –∫–∞—Ñ–µ–¥—Ä—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ú—É—Å–∏–Ω–æ–≤ –ê–±–¥—É–≤–∞–ª–∏" }
    ];

    for (const cmd of commands) {
      if (lower.includes(cmd.keyword)) {
        cmd.action?.();
        speak(cmd.response);
        return true;
      }
    }

    return false;
  };

  const processWithWitAI = async (text) => {
    try {
      const res = await fetch("https://api.wit.ai/message?v=20240328&q=" + encodeURIComponent(text), {
        headers: {
          Authorization: "Bearer TAMVCHA7WWV4VJV4P3TDD4MPBSREH3A3"
        }
      });
      const data = await res.json();
      console.log("ü§ñ –û—Ç–≤–µ—Ç –æ—Ç wit.ai:", data);

      const intent = data.intents?.[0]?.name;
      if (!intent) {
        speak("–Ø –Ω–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É.");
        return;
      }

      const actions = {
        go_library: () => { navigate("/library"); speak("–û—Ç–∫—Ä—ã–≤–∞—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É"); },
        go_schedule: () => { navigate("/schedule"); speak("–û—Ç–∫—Ä—ã–≤–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"); },
        go_teachers: () => { navigate("/teachers"); speak("–ü–µ—Ä–µ—Ö–æ–∂—É –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º"); },
        go_main: () => { navigate("/"); speak("–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"); }
      };

      actions[intent]?.() || speak("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.");
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ wit.ai:", error);
      speak("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É.");
    }
  };

  useEffect(() => {
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    if (!SpeechRecognition) {
      alert("–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.");
      return;
    }

    const recognition = new SpeechRecognition();
    recognition.lang = "ru-RU";
    recognition.continuous = true;
    recognition.interimResults = false;

    recognition.onresult = (event) => {
      const transcript = event.results[event.results.length - 1][0].transcript.trim();
      console.log("üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:", transcript);
      if (transcript === lastCommandRef.current) return;
      lastCommandRef.current = transcript;

      const handled = handleLocalCommands(transcript);
      if (!handled) processWithWitAI(transcript);
    };

    recognition.onerror = (event) => {
      if (["aborted", "no-speech"].includes(event.error)) {
        if (isActive) recognition.start();
      } else {
        console.error("–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:", event.error);
      }
    };

    recognition.onend = () => {
      if (isActive) recognition.start();
    };

    recognitionRef.current = recognition;
  }, [navigate, isActive]);

  const toggleVoice = () => {
    const recognition = recognitionRef.current;
    if (!recognition) return;

    if (isActive) {
      recognition.stop();
    } else {
      lastCommandRef.current = "";
      recognition.start();
    }

    setIsActive((prev) => !prev);
  };

  return (
    <button
      onClick={toggleVoice}
      style={{
        marginTop: "20px",
        padding: "10px 20px",
        fontSize: "16px",
        borderRadius: "10px",
        backgroundColor: isActive ? "#ff4d4d" : "#4CAF50",
        color: "white",
        border: "none",
        display: "flex",
        alignItems: "center",
        gap: "10px",
        cursor: "pointer"
      }}
    >
      {isActive ? <FaMicrophone /> : <FaMicrophoneSlash />} {isActive ? "–í—ã–∫–ª—é—á–∏—Ç—å –î–∂–∞—Ä–≤–∏—Å" : "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –î–∂–∞—Ä–≤–∏—Å"}
    </button>
  );
};

export default VoiceAssistant;



















// import { useEffect, useState, useRef } from "react";
// import { useNavigate } from "react-router-dom";
// import { FaMicrophone, FaMicrophoneSlash } from "react-icons/fa";

// const VoiceAssistant = () => {
//   const [isActive, setIsActive] = useState(false);
//   const recognitionRef = useRef(null);
//   const navigate = useNavigate();
//   const lastCommandRef = useRef("");

//   const speak = (message) => {
//     const synth = window.speechSynthesis;
//     const utterance = new SpeechSynthesisUtterance(message);
//     utterance.lang = "ru-RU";
//     synth.speak(utterance);
//   };

//   // üß† –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ—Ä–∞–∑ —á–µ—Ä–µ–∑ wit.ai
//   const processWithWitAI = async (text) => {
//     try {
//       const res = await fetch("https://api.wit.ai/message?v=20240328&q=" + encodeURIComponent(text), {
//         headers: {
//           Authorization: "Bearer TAMVCHA7WWV4VJV4P3TDD4MPBSREH3A3"
//         }
//       });
//       const data = await res.json();
//       console.log("ü§ñ –û—Ç–≤–µ—Ç –æ—Ç wit.ai:", data);

//       const intent = data.intents?.[0]?.name;

//       switch (intent) {
//         case "go_library":
//           navigate("/library");
//           speak("–û—Ç–∫—Ä—ã–≤–∞—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É");
//           break;
//         case "go_schedule":
//           navigate("/schedule");
//           speak("–û—Ç–∫—Ä—ã–≤–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ");
//           break;
//         case "go_teachers":
//           navigate("/teachers");
//           speak("–ü–µ—Ä–µ—Ö–æ–∂—É –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º");
//           break;
//         case "go_main":
//           navigate("/");
//           speak("–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞");
//           break;
//         default:
//           speak("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.");
//       }
//     } catch (error) {
//       console.error("–û—à–∏–±–∫–∞ wit.ai:", error);
//       speak("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É.");
//     }
//   };

//   useEffect(() => {
//     const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
//     if (!SpeechRecognition) {
//       alert("–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.");
//       return;
//     }

//     const recognition = new SpeechRecognition();
//     recognition.lang = "ru-RU";
//     recognition.continuous = true;
//     recognition.interimResults = false;

//     recognition.onresult = (event) => {
//       const transcript = event.results[event.results.length - 1][0].transcript.trim().toLowerCase();
//       console.log("üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:", transcript);

//       if (transcript === lastCommandRef.current) return;
//       lastCommandRef.current = transcript;

//         // üóì –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏
//   if (transcript.includes("–∫–∞–∫–æ–π —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å")) {
//     const date = new Date();
//     const days = ["–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞"];
//     const dayName = days[date.getDay()];
//     const day = date.getDate();
//     const month = date.toLocaleString("ru-RU", { month: "long" });
//     const year = date.getFullYear();
//     speak(`–°–µ–≥–æ–¥–Ω—è ${dayName}, ${day} ${month} ${year} –≥–æ–¥–∞`);
//     return;
//   }

//   // ‚òÄÔ∏è –ü–æ–≥–æ–¥–∞
//   if (transcript.includes("–ø–æ–≥–æ–¥–∞") && transcript.includes("–¥—É—à–∞–Ω–±–µ")) {
//     fetch("https://api.open-meteo.com/v1/forecast?latitude=38.56&longitude=68.78&current_weather=true")
//       .then(res => res.json())
//       .then(data => {
//         const temp = data.current_weather.temperature;
//         const wind = data.current_weather.windspeed;
//         speak(`–í –î—É—à–∞–Ω–±–µ —Å–µ–π—á–∞—Å ${temp} –≥—Ä–∞–¥—É—Å–æ–≤ –∏ –≤–µ—Ç–µ—Ä ${wind} –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤ –≤ —á–∞—Å`);
//       })
//       .catch(() => {
//         speak("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ");
//       });
//     return;
//   }

// // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Apertium
// const translateText = async (text, to = "en") => {
//   try {
//     const res = await fetch(`https://translate.googleapis.com/translate_a/single?client=gtx&sl=auto&tl=${to}&dt=t&q=${encodeURIComponent(text)}`);
//     const data = await res.json();
//     const translated = data[0][0][0];
//     speak(`–ü–µ—Ä–µ–≤–æ–¥: ${translated}`);
//   } catch (err) {
//     console.error("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞:", err);
//     speak("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥");
//   }
// };

// // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ø–µ—Ä–µ–≤–µ–¥–∏"
// if (transcript.includes("–ø–µ—Ä–µ–≤–µ–¥–∏")) {
//   const match = transcript.match(/–ø–µ—Ä–µ–≤–µ–¥–∏ (.+?) –Ω–∞ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π|—Ä—É—Å—Å–∫–∏–π|—Ç–∞–¥–∂–∏–∫—Å–∫–∏–π)/);
//   if (match) {
//     const phrase = match[1];
//     const lang = match[2];
//     const langMap = {
//       –∞–Ω–≥–ª–∏–π—Å–∫–∏–π: "en",
//       —Ä—É—Å—Å–∫–∏–π: "ru",
//       —Ç–∞–¥–∂–∏–∫—Å–∫–∏–π: "tg"
//     };
//     const targetLang = langMap[lang];
//     translateText(phrase, targetLang);
//     return;
//   }
//   speak("–°–∫–∞–∂–∏: –ø–µ—Ä–µ–≤–µ–¥–∏ —Ñ—Ä–∞–∑—É –Ω–∞ –Ω—É–∂–Ω—ã–π —è–∑—ã–∫.");
//   return;
// }

//       // ‚ö° –õ–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
//       if (transcript.includes("–¥–∂–∞—Ä–≤–∏—Å") || transcript.includes("–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞")) {
//         if (transcript.includes("–±–∏–±–ª–∏–æ—Ç–µ–∫")) {
//           navigate("/library");
//           speak("–ü–µ—Ä–µ—Ö–æ–¥ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω");
//           return;
//         } else if (transcript.includes("–≥–ª–∞–≤–Ω")) {
//           navigate("/");
//           speak("–í–æ—Ç –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞");
//           return;
//         } else if (transcript.includes("–ø–æ–∏—Å–∫")) {
//           navigate("/searchpage");
//           speak("–û—Ç–∫—Ä—ã—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–∏—Å–∫–∞");
//           return;
//         } else if (transcript.includes("–ø—Ä–∏–≤–µ—Ç")) {
//           speak("–ü—Ä–∏–≤–µ—Ç –±–æ—Å—Å, –∫–∞–∫ –≤–∞—à–∏ –¥–µ–ª–∞?");
//         } else if (transcript.includes("—Å–∞–ª–∞–º –∞–ª–µ–π–∫—É–º")) {
//           speak("–í–æ–∞–ª–µ–π–∫—É–º —Å–∞–ª–æ–º, —á–∏—Ö–µ–ª —à—É–º–æ? —Å–æ–∑? —Ö—É–±? –±–∞ —à—É–º–æ —á–∏ –∫—É–º–∞–∫ —Ä–∞—Å–æ–Ω–∞–º —Å–∞—Ä–¥–æ—Ä?");
//         } else if (transcript.includes("—Å–∞–ª–æ–º –∞–ª–µ–π–∫—É–º")) {
//           speak("–í–æ–∞–ª–µ–π–∫—É–º —Å–∞–ª–æ–º, —á–∏—Ö–µ–ª–µ–¥ —à—É–º–æ? –±–∞ —à—É–º–æ —á–∏ –∫—É–º–∞–∫ —Ä–∞—Å–æ–Ω–∞–º —Å–∞—Ä–¥–æ—Ä?");
//         } else if (transcript.includes("–¥–µ–∫–∞–Ω —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞")) {
//           speak("–î–µ–∫–∞–Ω —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –¶–∏—Ñ—Ä–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —Å–∏—Å—Ç–µ–º—ã –∏ –∑–∞—â–∏—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ê–±–¥—É—Ä–∞—Å—É–ª–æ–≤ –î–∞–ª–µ—Ä –ê–Ω–≤–∞—Ä–æ–≤–∏—á");
//         } else if (transcript.includes("—Ä–µ–∫—Ç–æ—Ä —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞")) {
//           speak("–†–µ–∫—Ç–æ—Ä–æ–º –¢–∞–¥–∂–∏–∫—Å–∫–æ–≥–æ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –∏–º–µ–Ω–∏ –∞–∫–∞–¥–µ–º–∏–∫–∞ –ú—É—Ö–∞–º–º–∞–¥ –û—Å–∏–º–∏ —è–≤–ª—è–µ—Ç—Å—è –î–∞–≤–ª–∞—Ç–∑–æ–¥–∞ –ö—É–¥—Ä–∞—Ç –ö–∞–º–±–∞—Ä");
//         } else if (transcript.includes("–∑–∞–≤–µ–¥—É—é—â–∏–π –∫–∞—Ñ–µ–¥—Ä—ã")) {
//           speak("–ó–∞–≤–µ–¥—É—é—â–∏–π –∫–∞—Ñ–µ–¥—Ä—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ú—É—Å–∏–Ω–æ–≤ –ê–±–¥—É–≤–∞–ª–∏");
//         }
//       }

//       // üß† –í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ —á–µ—Ä–µ–∑ wit.ai
//       processWithWitAI(transcript);
//     };

//     recognition.onerror = (event) => {
//       if (["aborted", "no-speech"].includes(event.error)) {
//         if (isActive) recognition.start();
//       } else {
//         console.error("–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:", event.error);
//       }
//     };

//     recognition.onend = () => {
//       if (isActive) recognition.start();
//     };

//     recognitionRef.current = recognition;
//   }, [navigate, isActive]);

//   const toggleVoice = () => {
//     const recognition = recognitionRef.current;
//     if (!recognition) return;

//     if (isActive) {
//       recognition.stop();
//     } else {
//       lastCommandRef.current = "";
//       recognition.start();
//     }

//     setIsActive((prev) => !prev);
//   };

//   return (
//     <button
//       onClick={toggleVoice}
//       style={{
//         marginTop: "20px",
//         padding: "10px 20px",
//         fontSize: "16px",
//         borderRadius: "10px",
//         backgroundColor: isActive ? "#ff4d4d" : "#4CAF50",
//         color: "white",
//         border: "none",
//         display: "flex",
//         alignItems: "center",
//         gap: "10px",
//         cursor: "pointer"
//       }}
//     >
//       {isActive ? <FaMicrophone /> : <FaMicrophoneSlash />}
//       {isActive ? "–í—ã–∫–ª—é—á–∏—Ç—å –î–∂–∞—Ä–≤–∏—Å" : "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –î–∂–∞—Ä–≤–∏—Å"}
//     </button>
//   );
// };

// export default VoiceAssistant;
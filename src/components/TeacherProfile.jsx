import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useLocation, useParams } from 'react-router-dom';
import { getStorage, ref as storageRef, uploadBytes, getDownloadURL, deleteObject } from "firebase/storage";
import { getDatabase, ref as dbRef, push, set, get, update, remove, onValue } from "firebase/database";
import { uploadBytesResumable } from "firebase/storage";
import { auth } from "../firebase";
import bookIcon from '../book-icon.png';
import editIcon from '../edit-icon.png';
import "../TeacherProfile.css";
import defaultAvatar from "../default-image.png";
import { FiHome, FiUser, FiArrowLeft, FiMessageSquare, FiBell, FiChevronLeft, FiChevronRight, FiSettings, FiBookOpen, FiUserCheck, FiSearch } from "react-icons/fi";
import ttulogo from "../Ttulogo.png";
// import { CiTextAlignCenter } from 'react-icons/ci';

const TeacherProfile = () => {
  const { state } = useLocation();
  const { teacher } = state || {};
  const { id } = useParams();
  const [books, setBooks] = useState([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingBook, setEditingBook] = useState(null);
  const [newBook, setNewBook] = useState({ title: '', description: '', file: null });
  const [uploading, setUploading] = useState(false);
  const [showBooks, setShowBooks] = useState(false); // –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç—å—é —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥
  const [notification, setNotification] = useState(null); // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const storage = getStorage();
  const database = getDatabase();
  const navigate = useNavigate();
  const [isMobile, setIsMobile] = useState(false);
  const [userRole, setUserRole] = useState('');
  const [showVideoForm, setShowVideoForm] = useState(false);
  const [newVideo, setNewVideo] = useState({ title: '', description: '', file: null });
  const [uploadProgress, setUploadProgress] = useState(0);
  const [showVideos, setShowVideos] = useState(false);
  const [videos, setVideos] = useState([]);
  const [editingVideo, setEditingVideo] = useState(null);
  const [message, setMessage] = useState('');
  const [audience, setAudience] = useState('');
  const [selectedDepartment, setSelectedDepartment] = useState('');

  useEffect(() => {
    const user = auth.currentUser;
    if (user) {
      const userRef = dbRef(database, `users/${user.uid}`);
      onValue(userRef, (snapshot) => {
        const userData = snapshot.val();
        setUserRole(userData?.role || '');
      });
    }
  }, [database]);

  // –°–ø–∏—Å–æ–∫ –∫–∞—Ñ–µ–¥—Ä
  const departments = [
    "–°–∏—Å—Ç–µ–º–∞—Ö–æ–∏ –ê–≤—Ç–æ–º–∞—Ç–∏–∫—É–Ω–æ–Ω–∏–¥–∞—à—É–¥–∞–∏ –ò–¥–æ—Ä–∞–∫—É–Ω–∏",
    "–®–∞–±–∞–∫–∞—Ö–æ–∏ –ê–ª–æ–∫–∞ –í–∞ –°–∏—Å—Ç–µ–º–∞—Ö–æ–∏ –ö–æ–º—É—Ç–∞—Ç—Å–∏–æ–Ω–∏",
    "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö–æ–∏ –ò—Ç—Ç–∏–ª–æ–æ—Ç–∏ –í–∞ –•–∏—Ñ–∑–∏ –ú–∞—ä–ª—É–º–æ—Ç",
    "–ê–≤—Ç–æ–º–∞—Ç–æ–Ω–∏–∏ –†–∞–≤–∞–Ω–¥—Ö–æ–∏ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏ –í–∞ –ò—Å—Ç–µ—Ö—Å–æ–ª–æ—Ç",
    "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –í–∞ –¢–µ—Ö–Ω–∏–∫–∞–∏ –•–∏—Å–æ–±–±–∞—Ä–æ—Ä"
  ];

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const handleSendNotification = async () => {
    if (!message || !audience || (audience === 'department' && !selectedDepartment)) {
      alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è!');
      return;
    }

    const db = getDatabase();
    const usersRef = dbRef(db, 'users');

    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const snapshot = await get(usersRef);
      const allUsers = snapshot.val();
      const receivers = [];

      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
      Object.keys(allUsers).forEach(userId => {
        const user = allUsers[userId];
        switch (audience) {
          case 'all':
            receivers.push(userId);
            break;
          case 'teachers':
            if (user.role === 'teacher') receivers.push(userId);
            break;
          case 'department':
            if (user.role === 'teacher' && user.cathedra === selectedDepartment) {
              receivers.push(userId);
            }
            break;
        }
      });

      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const notification = {
        type: 'dean_notification',
        message: message,
        deanName: `${teacher.name} ${teacher.surname}`,
        deanAvatar: teacher.photo || defaultAvatar,
        timestamp: new Date().toISOString(),
      };

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É –ø–æ–ª—É—á–∞—Ç–µ–ª—é
      receivers.forEach(userId => {
        const userNotificationsRef = dbRef(db, `notifications/${userId}`);
        push(userNotificationsRef, notification);
      });

      // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      setMessage('');
      setAudience('');
      setSelectedDepartment('');
      showNotification('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
    }
  };

  const [isMenuOpen, setIsMenuOpen] = useState(() => {
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ localStorage –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    const savedState = localStorage.getItem('isMenuOpen');
    return savedState ? JSON.parse(savedState) : true;
  });

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ localStorage –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    localStorage.setItem('isMenuOpen', JSON.stringify(isMenuOpen));
  }, [isMenuOpen]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
  useEffect(() => {
    const checkMobile = () => {
      const mobile = window.innerWidth < 700;
      setIsMobile(mobile);
      if (mobile) {
        setIsMenuOpen(false);
      } else {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
        const savedState = localStorage.getItem('isMenuOpen');
        setIsMenuOpen(savedState ? JSON.parse(savedState) : true);
      }
    };

    checkMobile();
    window.addEventListener('resize', checkMobile);
    return () => window.removeEventListener('resize', checkMobile);
  }, []);

  // –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–Ω—é
  const toggleMenuDesktop = () => {
    setIsMenuOpen(prev => {
      const newState = !prev;
      localStorage.setItem('isMenuOpen', JSON.stringify(newState));
      return newState;
    });
  };

  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª—å –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  const mainContentStyle = {
    marginLeft: isMenuOpen ? "250px" : "0px",
    transition: "margin 0.3s ease",
  };

  useEffect(() => {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–∑ Firebase
    const booksRef = dbRef(database, `teachers/${id}/books`);
    onValue(booksRef, (snapshot) => {
      const data = snapshot.val();
      if (data) {
        const loadedBooks = Object.keys(data).map(bookId => ({ id: bookId, ...data[bookId] }));
        setBooks(loadedBooks);
      }
    });
  }, [database, id]);

  useEffect(() => {
    const user = auth.currentUser;
    if (user) {
      const videosRef = dbRef(database, `users/${user.uid}/videos`);
      onValue(videosRef, (snapshot) => {
        const data = snapshot.val();
        if (data) {
          const loadedVideos = Object.keys(data).map(videoId => ({
            id: videoId,
            ...data[videoId]
          }));
          setVideos(loadedVideos);
        }
      });
    }
  }, [database]);

  // 3. –•—É–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
  const handleUploadVideoLesson = async () => {
    if (!newVideo.title || !newVideo.description) return;
    setUploading(true);
  
    try {
      let url = editingVideo?.url || '';
      let storagePath = editingVideo?.storagePath || '';
  
      // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ–º –∏ –∑–∞–º–µ–Ω—è–µ–º
      if (newVideo.file) {
        const storageReference = storageRef(storage, `videos/${newVideo.file.name}`);
        const uploadTask = uploadBytesResumable(storageReference, newVideo.file);
        await new Promise((resolve, reject) => {
          uploadTask.on("state_changed",
            (snapshot) => {
              const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
              setUploadProgress(Math.round(progress));
            },
            (error) => {
              console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:", error);
              reject(error);
            },
            async () => {
              url = await getDownloadURL(uploadTask.snapshot.ref);
              storagePath = uploadTask.snapshot.ref.fullPath;
              resolve();
            }
          );
        });
      }
  
      const videoData = {
        title: newVideo.title,
        description: newVideo.description,
        url,
        storagePath,
        cathedra: teacher.cathedra,
        author: `${teacher.name} ${teacher.surname}`,
        timestamp: new Date().toISOString(),
      };
  
      const db = getDatabase();
      const user = auth.currentUser;
  
      if (editingVideo) {
        // üîÅ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –≤ users
        await update(dbRef(db, `users/${user.uid}/videos/${editingVideo.id}`), videoData);
  
        // üîÅ –û–±–Ω–æ–≤–ª—è–µ–º –≤ videoLessons –ø–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é url
        const lessonsRef = dbRef(db, 'videoLessons');
        onValue(lessonsRef, (snapshot) => {
          const data = snapshot.val();
          if (data) {
            Object.entries(data).forEach(([key, val]) => {
              if (val.url === editingVideo.url) {
                update(dbRef(db, `videoLessons/${key}`), videoData);
              }
            });
          }
        }, { onlyOnce: true });
  
        showNotification("–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!");
      } else {
        // üÜï –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ
        await push(dbRef(db, 'videoLessons'), videoData);
        await push(dbRef(db, `users/${user.uid}/videos`), videoData);
        showNotification("–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!");
      }
  
      setUploading(false);
      setUploadProgress(0);
      setNewVideo({ title: '', description: '', file: null });
      setShowVideoForm(false);
      setEditingVideo(null);
    } catch (err) {
      console.error(err);
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ");
      setUploading(false);
    }
  };  

  const handleEditVideo = (video) => {
    setEditingVideo(video);
    setNewVideo({ title: video.title, description: video.description, file: null });
    setShowVideoForm(true);
  };

  const handleDeleteVideo = async (video) => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –≤–∏–¥–µ–æ—É—Ä–æ–∫?')) {
      try {
        // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        const videoRef = storageRef(storage, video.storagePath);
        await deleteObject(videoRef);
  
        // –£–¥–∞–ª—è–µ–º –∏–∑ users/UID/videos
        const userVideoRef = dbRef(database, `users/${auth.currentUser.uid}/videos/${video.id}`);
        await remove(userVideoRef);
  
        // –£–¥–∞–ª—è–µ–º –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ videoLessons –ø–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é URL
        const lessonsRef = dbRef(database, 'videoLessons');
        onValue(lessonsRef, (snapshot) => {
          const data = snapshot.val();
          if (data) {
            Object.entries(data).forEach(([key, val]) => {
              if (val.url === video.url) {
                remove(dbRef(database, `videoLessons/${key}`));
              }
            });
          }
        }, { onlyOnce: true });
  
        // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
        setVideos(prev => prev.filter(v => v.id !== video.id));
  
        showNotification('–í–∏–¥–µ–æ—É—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.');
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ—É—Ä–æ–∫–∞: ", error);
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ—É—Ä–æ–∫–∞.");
      }
    }
  };  

  const handleUploadBook = async () => {
    if (newBook.title && newBook.description && (newBook.file || editingBook)) {
      setUploading(true);

      let fileURL = editingBook ? editingBook.fileURL : '';
      if (newBook.file) {
        const fileRef = storageRef(storage, `books/${newBook.file.name}`);
        await uploadBytes(fileRef, newBook.file);
        fileURL = await getDownloadURL(fileRef);
      }

      const bookData = {
        title: newBook.title,
        description: newBook.description,
        fileURL
      };

      if (editingBook) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–Ω–∏–≥—É
        const bookRef = dbRef(database, `teachers/${id}/books/${editingBook.id}`);
        await update(bookRef, bookData);
        showNotification('–ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.');
      } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–Ω–∏–≥—É
        const booksRef = dbRef(database, `teachers/${id}/books`);
        await set(push(booksRef), bookData);
        showNotification('–ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.');
      }

      setNewBook({ title: '', description: '', file: null });
      setIsModalOpen(false);
      setEditingBook(null);
      setUploading(false);
    }
  };

  const handleEditBook = (book) => {
    setEditingBook(book);
    setNewBook({ title: book.title, description: book.description, file: null });
    setIsModalOpen(true);
  };

  const handleDeleteBook = async (book) => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–Ω–∏–≥—É?')) {
      try {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑ URL —Ñ–∞–π–ª–∞
        const fileRef = storageRef(storage, `books/${decodeURIComponent(book.fileURL.split('%2F').pop().split('?')[0])}`);
        await deleteObject(fileRef);

        const bookRef = dbRef(database, `teachers/${id}/books/${book.id}`);
        await remove(bookRef);
        showNotification('–ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.');
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏: ", error);
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏. –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      }
    }
  };

  const showNotification = (message) => {
    setNotification(message);
    setTimeout(() => setNotification(null), 3000); // –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
  };

  if (!teacher) {
    return <p>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.</p>;
  }

  return (
    <div className="glva">
      <div className={`sidebar ${isMenuOpen ? "open" : "closed"}`}>
        <div className="sidebar-header">
          <img style={{ width: "50px", height: "45px" }} src={ttulogo} alt="" />
          {isMenuOpen ? (
            <>
              <h2>TTU</h2>
              <FiChevronLeft
                className="toggle-menu"
                onClick={toggleMenuDesktop}
              />
            </>
          ) : (
            <FiChevronRight
              className="toggle-menu"
              onClick={toggleMenuDesktop}
            />
          )}
        </div>

        <nav className="menu-items">
          <Link to="/" className="menu-item" style={{ paddingRight: "15px" }}>
            <FiHome className="menu-icon" />
            {isMenuOpen && <span>–ì–ª–∞–≤–Ω–∞—è</span>}
          </Link>
          <div className="menu-find-block">
            <Link to="/searchpage" className="menu-item">
              <FiSearch className="menu-icon" />
              {isMenuOpen && <span>–ü–æ–∏—Å–∫</span>}
            </Link>
            <Link to="/teachers" className="menu-item">
              <FiUserCheck className="menu-icon" />
              {isMenuOpen && <span>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏</span>}
            </Link>
            <Link to="/library" className="menu-item">
              <FiBookOpen className="menu-icon" />
              {isMenuOpen && <span>–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞</span>}
            </Link>
          </div>
          <Link to="/myprofile" className="menu-item">
            <FiUser className="menu-icon" style={{ color: "lightgreen" }} />
            {isMenuOpen && <span>–ü—Ä–æ—Ñ–∏–ª—å</span>}
          </Link>
          <div className="menu-find-block">
            <Link to="/chats" className="menu-item">
              <FiMessageSquare className="menu-icon" />
              {isMenuOpen && <span>–°–æ–æ–±—â–µ–Ω–∏—è</span>}
            </Link>
            <Link to="/notifications" className="menu-item">
              <FiBell className="menu-icon" />
              {isMenuOpen && <span>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</span>}
            </Link>
          </div>
          <Link to="/authdetails" className="menu-item">
            <FiSettings className="menu-icon" />
            {isMenuOpen && <span>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</span>}
          </Link>
        </nav>

        <div className="logo-and-tik">
          TRSvaHM
          {isMenuOpen &&
            <div>
              <p>&copy; 2025 –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
            </div>
          }
        </div>
      </div>
      <div className="tch-profile-container" style={mainContentStyle}>
        <Link className="tch-profile-back-button" onClick={() => navigate(-1)}>
          <FiArrowLeft />
        </Link>
        <h2>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è</h2>
        <div className="tch-profile-info-books-list">
          <div className="tch-profile-info">
            <div className="teach-img-name-surname">
              <img
                src={teacher.photo || defaultAvatar}
                alt={`${teacher.name}`}
              />
              <p> {teacher.name} {teacher.surname}</p>
            </div>
            <p><strong>–ü—Ä–µ–¥–º–µ—Ç:</strong> {teacher.subject}</p>
            <p><strong>–ö–∞—Ñ–µ–¥—Ä–∞:</strong> {teacher.cathedra}</p>
            <p><strong>–ó–≤–∞–Ω–∏–µ:</strong> {teacher.runk}</p>
            <p><strong>–õ–æ–≥–∏–Ω:</strong> {teacher.email}</p>
          </div>

          {/* –§–æ—Ä–º–∞ –¥–ª—è –¥–µ–∫–∞–Ω–∞ */}
          {userRole === 'dean' && (
            <div className="dean-notification-form">
              <h3>–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h3>
              <textarea
                value={message}
                onChange={(e) => setMessage(e.target.value)}
                placeholder="–¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è..."
                className="dean-textarea"
              />

              <div className="audience-selector">
                <button
                  onClick={() => setAudience('all')}
                  className={audience === 'all' ? 'active' : ''}
                >
                  –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                </button>

                <button
                  onClick={() => setAudience('teachers')}
                  className={audience === 'teachers' ? 'active' : ''}
                >
                  –í—Å–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º
                </button>

                <button
                  onClick={() => setAudience('department')}
                  className={audience === 'department' ? 'active' : ''}
                >
                  –ö–∞—Ñ–µ–¥—Ä–µ
                </button>
              </div>

              {audience === 'department' && (
                <select
                  value={selectedDepartment}
                  onChange={(e) => setSelectedDepartment(e.target.value)}
                  className="department-select"
                >
                  <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ñ–µ–¥—Ä—É</option>
                  {departments.map((dept, index) => (
                    <option key={index} value={dept}>{dept}</option>
                  ))}
                </select>
              )}

              <button
                onClick={handleSendNotification}
                className="send-notification-btn"
              >
                –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
              </button>
            </div>
          )}

          <div className="spisok-button-block">
            <button onClick={() => setShowBooks(!showBooks)} className="toggle-books-button">
              {showBooks ? '–°–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥' : '–°–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ'}
            </button>

            {showBooks && (
              <div className="books-list-container">
                <div className="books-list">
                  {books.map((book) => (
                    <div key={book.id} className="book-item">
                      <img src={bookIcon} alt="–ò–∫–æ–Ω–∫–∞ –∫–Ω–∏–≥–∏" className="book-icon" />
                      <div className="book-info">
                        <h4>{book.title}</h4>
                        <p>{book.description}</p>
                      </div>
                      <img
                        src={editIcon}
                        alt="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–∏–≥—É"
                        className="edit-book-icon"
                        onClick={() => handleEditBook(book)}
                      />
                    </div>
                  ))}
                </div>
              </div>
            )}

            <button onClick={() => setIsModalOpen(true)} className="upload-book-button">–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–Ω–∏–≥—É</button>

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏ */}
            {isModalOpen && (
              <div className="modal">
                <div className="modal-content">
                  <h3>{editingBook ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–∏–≥—É' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—É—é –∫–Ω–∏–≥—É'}</h3>
                  <input
                    type="text"
                    placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏"
                    value={newBook.title}
                    onChange={(e) => setNewBook({ ...newBook, title: e.target.value })}
                  />
                  <textarea
                    placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏"
                    value={newBook.description}
                    onChange={(e) => setNewBook({ ...newBook, description: e.target.value })}
                  />
                  <input
                    type="file"
                    accept="application/pdf"
                    onChange={(e) => setNewBook({ ...newBook, file: e.target.files[0] })}
                  />
                  <div className="modal-buttons">
                    <button onClick={handleUploadBook} disabled={uploading}>
                      {uploading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : editingBook ? '–û–±–Ω–æ–≤–∏—Ç—å' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å'}
                    </button>
                    {editingBook && (
                      <button className="delete-button" onClick={() => handleDeleteBook(editingBook)}>
                        –£–¥–∞–ª–∏—Ç—å
                      </button>
                    )}
                    <button onClick={() => setIsModalOpen(false)}>–û—Ç–º–µ–Ω–∞</button>
                  </div>
                </div>
              </div>
            )}

            <button className="upload-book-button" onClick={() => setShowVideoForm(true)}>–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ—É—Ä–æ–∫</button>
            <button onClick={() => setShowVideos(!showVideos)} className="upload-book-button">
              {showVideos ? '–°–∫—Ä—ã—Ç—å –º–æ–∏ –≤–∏–¥–µ–æ—É—Ä–æ–∫–∏' : '–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –≤–∏–¥–µ–æ—É—Ä–æ–∫–∏'}
            </button>


            {showVideoForm && (
              <div className="modal">
                <div className="modal-content">
                <h3>{editingVideo ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ—É—Ä–æ–∫' : '–ù–æ–≤—ã–π –≤–∏–¥–µ–æ—É—Ä–æ–∫'}</h3>
                  <input
                    type="text"
                    placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ—É—Ä–æ–∫–∞"
                    value={newVideo.title}
                    onChange={(e) => setNewVideo({ ...newVideo, title: e.target.value })}
                  />
                  <textarea
                    placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ—É—Ä–æ–∫–∞"
                    value={newVideo.description}
                    onChange={(e) => setNewVideo({ ...newVideo, description: e.target.value })}
                  />
                  <input
                    type="file"
                    accept="video/mp4"
                    onChange={(e) => setNewVideo({ ...newVideo, file: e.target.files[0] })}
                  />
                  {uploadProgress > 0 && <progress value={uploadProgress} max="100" />}
                  <div className="modal-buttons">
                    <button onClick={handleUploadVideoLesson} disabled={uploading}>
                      {uploading ? `–ó–∞–≥—Ä—É–∑–∫–∞ ${uploadProgress}%` : '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å'}
                    </button>
                    <button onClick={() => setShowVideoForm(false)}>–û—Ç–º–µ–Ω–∞</button>
                  </div>
                </div>
              </div>
            )}

            {showVideos && (
              <div className="videos-list">
                {videos.map((video) => (
                  <div key={video.id} className="video-item">
                    <h4>{video.title}</h4>
                    <p>{video.description}</p>
                    <video width="320" height="240" controls>
                      <source src={video.url} type="video/mp4" />
                      –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ —Ç–µ–≥.
                    </video>
                    <button onClick={() => handleEditVideo(video)}>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                    <button onClick={() => handleDeleteVideo(video)}>–£–¥–∞–ª–∏—Ç—å</button>
                  </div>
                ))}
              </div>
            )}

          </div>
        </div>
        {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ */}
        {notification && <div className="notification">{notification}</div>}
      </div>
    </div>
  );
};

export default TeacherProfile;